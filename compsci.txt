RECURSION - (Computer science concept)

    - breaking down a large task into smaller tasks 
      then returning the tasks up the chain

      NOTE: IF STACK CALL HAS NO LIMIT OR IS TOO DEEP, THERE 
            WILL BE A STACKERROR OR STACKOVERFLOW!! 
    
    e.g. comparing two "rocks" to check which is larger of the group
        
        how its done with iterations 'each' method

      # make some random rocks
        rocks = 30.times.map{rand(200) + 1}
        puts rocks.join(', ')
        max_rock = 0

        rocks.each do |rock|
        max_rock = rock if max_rock < rock 
        end

        puts "Heaviest rock is: #{max_rock}"

        SAME task done with recursion 

        def rock_judger(rocks_arr)    
            if rocks_arr.length <= 2  # the base case
            a = rocks_arr[0]
            b = rocks_arr[-1]
            else
                  # this part breaks code down into bit sizes
                    THEN enters it back into the same block!! 
                    NOTE: keeps doing it until it reaching the if

            a = rock_judger(rocks_arr.slice!(0,rocks_arr.length/2))
            b = rock_judger(rocks_arr)
            end    
            
            return a > b ? a : b
        end

Binary Tree Traversal 

    Breath First (Level order)
        - need to queue each node and record their children 
            starting from the root node. Visiting left to right
    Depth First (Preorder, Inorder, Postorder)
        - DLR - Preorder
        - LDR - Inorder
        - RLD - Postorder


{Micellaneous thoughts}

within any numerical algorithm usual method is to initialize 
e.g. n= 0 or i =0 
    this gives a starting point, which is also refered to initializing

